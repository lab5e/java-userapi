/*
 * The User API
 * API to manage teams, members and tokens
 *
 * The version of the OpenAPI document: 1.3.4 breezy-leafy
 * Contact: dev@lab5e.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lab5e.user;

import com.lab5e.ApiException;
import com.lab5e.user.model.AcceptInviteRequest;
import com.lab5e.user.model.Invite;
import com.lab5e.user.model.InviteList;
import com.lab5e.user.model.InviteRequest;
import com.lab5e.user.model.Member;
import com.lab5e.user.model.MemberList;
import com.lab5e.user.model.RpcStatus;
import com.lab5e.user.model.Team;
import com.lab5e.user.model.TeamList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Ignore
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    
    /**
     * Accept invite
     *
     * Accept an invite from another user. This will add the currently logged in user to the team as a regular memeber. When the invite is accepted it is removed from the team&#39;s invites and cannot be reused.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userAcceptInviteTest() throws ApiException {
        AcceptInviteRequest body = null;
        Team response = api.userAcceptInvite(body);

        // TODO: test validations
    }
    
    /**
     * Create team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCreateTeamTest() throws ApiException {
        Team body = null;
        Team response = api.userCreateTeam(body);

        // TODO: test validations
    }
    
    /**
     * Delete invite
     *
     * Delete an invite created earlier. You must be an administrator of the team to perform this action
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteInviteTest() throws ApiException {
        String teamId = null;
        String code = null;
        Object response = api.userDeleteInvite(teamId, code);

        // TODO: test validations
    }
    
    /**
     * Remove member
     *
     * Remove a member from the team. You must be an administrator to do this. You can&#39;t remove yourself from the team.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteMemberTest() throws ApiException {
        String teamId = null;
        String userId = null;
        Member response = api.userDeleteMember(teamId, userId);

        // TODO: test validations
    }
    
    /**
     * Remove team
     *
     * Update the team. You must be an administrator of the team to edit it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDeleteTeamTest() throws ApiException {
        String teamId = null;
        Team response = api.userDeleteTeam(teamId);

        // TODO: test validations
    }
    
    /**
     * Generate invite
     *
     * Update the team. You must be an administrator of the team to edit it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGenerateInviteTest() throws ApiException {
        String teamId = null;
        InviteRequest body = null;
        Invite response = api.userGenerateInvite(teamId, body);

        // TODO: test validations
    }
    
    /**
     * List invites
     *
     * Update the team. You must be an administrator of the team to edit it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userListInvitesTest() throws ApiException {
        String teamId = null;
        InviteList response = api.userListInvites(teamId);

        // TODO: test validations
    }
    
    /**
     * List teams
     *
     * Update the team. You must be an administrator of the team to edit it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userListTeamsTest() throws ApiException {
        TeamList response = api.userListTeams();

        // TODO: test validations
    }
    
    /**
     * Retrieve invite
     *
     * Read a single invite from the team&#39;s set of non-redeemed invites.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRetrieveInviteTest() throws ApiException {
        String teamId = null;
        String code = null;
        Invite response = api.userRetrieveInvite(teamId, code);

        // TODO: test validations
    }
    
    /**
     * Retrieve member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRetrieveMemberTest() throws ApiException {
        String teamId = null;
        String userId = null;
        Member response = api.userRetrieveMember(teamId, userId);

        // TODO: test validations
    }
    
    /**
     * Retrieve team
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRetrieveTeamTest() throws ApiException {
        String teamId = null;
        Team response = api.userRetrieveTeam(teamId);

        // TODO: test validations
    }
    
    /**
     * List members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRetrieveTeamMembersTest() throws ApiException {
        String teamId = null;
        MemberList response = api.userRetrieveTeamMembers(teamId);

        // TODO: test validations
    }
    
    /**
     * Update member
     *
     * You must be an administrator of the team to update member settings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUpdateMemberTest() throws ApiException {
        String teamId = null;
        String userId = null;
        Member body = null;
        Member response = api.userUpdateMember(teamId, userId, body);

        // TODO: test validations
    }
    
    /**
     * Update team
     *
     * Update the team. You must be an administrator of the team to edit it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUpdateTeamTest() throws ApiException {
        String teamId = null;
        Team body = null;
        Team response = api.userUpdateTeam(teamId, body);

        // TODO: test validations
    }
    
}
